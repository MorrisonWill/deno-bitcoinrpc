{
  "getbestblockhash": "Returns the hash of the best (tip) block in the most-work fully-validated chain.",
  "getblock": "If verbosity is 0, returns a string that is serialized, hex-encoded data for block ‘hash’.",
  "getblockchaininfo": "Returns an object containing various state info regarding blockchain processing.",
  "getblockcount": "Returns the height of the most-work fully-validated chain.",
  "getblockfilter": "Retrieve a BIP 157 content filter for a particular block.",
  "getblockhash": "Returns hash of block in best-block-chain at height provided.",
  "getblockheader": "If verbose is false, returns a string that is serialized, hex-encoded data for blockheader ‘hash’.",
  "getblockstats": "Compute per block statistics for a given window. All amounts are in satoshis.",
  "getchaintips": "Return information about all known tips in the block tree, including the main chain as well as orphaned branches.",
  "getchaintxstats": "Compute statistics about the total number and rate of transactions in the chain.",
  "getdifficulty": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.",
  "getmempoolancestors": "If txid is in the mempool, returns all in-mempool ancestors.",
  "getmempooldescendants": "If txid is in the mempool, returns all in-mempool descendants.",
  "getmempoolentry": "Returns mempool data for given transaction",
  "getmempoolinfo": "Returns details on the active state of the TX memory pool.",
  "getrawmempool": "Returns all transaction ids in memory pool as a json array of string transaction ids.",
  "gettxout": "Returns details about an unspent transaction output.",
  "gettxoutproof": "Returns a hex-encoded proof that “txid” was included in a block.",
  "gettxoutsetinfo": "Returns statistics about the unspent transaction output set.",
  "preciousblock": "Treats a block as if it were received before others with the same work.",
  "pruneblockchain": "",
  "savemempool": "Dumps the mempool to disk. It will fail until the previous dump is fully loaded.",
  "scantxoutset": "EXPERIMENTAL warning: this call may be removed or changed in future releases.",
  "verifychain": "Verifies blockchain database.",
  "verifytxoutproof": "Verifies that a proof points to a transaction in a block, returning the transaction it commits to\nand throwing an RPC error if the block is not in our best chain",
  "getmemoryinfo": "Returns an object containing information about memory usage.",
  "getrpcinfo": "Returns details of the RPC server.",
  "help": "List all commands, or get help for a specified command.",
  "logging": "Gets and sets the logging configuration.",
  "stop": "Request a graceful shutdown of Bitcoin Core.",
  "uptime": "Returns the total uptime of the server.",
  "generateblock": "Mine a block with a set of ordered transactions immediately to a specified address or descriptor (before the RPC call returns)",
  "generatetoaddress": "Mine blocks immediately to a specified address (before the RPC call returns)",
  "generatetodescriptor": "Mine blocks immediately to a specified descriptor (before the RPC call returns)",
  "getblocktemplate": "If the request parameters include a ‘mode’ key, that is used to explicitly select between the default ‘template’ request or a ‘proposal’.",
  "getwork": "",
  "getmininginfo": "Returns a json object containing mining-related information.",
  "getnetworkhashps": "Returns the estimated network hashes per second based on the last n blocks.",
  "prioritisetransaction": "Accepts the transaction into mined blocks at a higher (or lower) priority",
  "submitblock": "Attempts to submit new block to network.",
  "submitheader": "Decode the given hexdata as a header and submit it as a candidate chain tip if valid.",
  "addnode": "Attempts to add or remove a node from the addnode list.",
  "clearbanned": "Clear all banned IPs.",
  "disconnectnode": "Immediately disconnects from the specified peer node.",
  "getaddednodeinfo": "Returns information about the given added node, or all added nodes\n(note that onetry addnodes are not listed here)",
  "getconnectioncount": "Returns the number of connections to other nodes.",
  "getnettotals": "Returns information about network traffic, including bytes in, bytes out,\nand current time.",
  "getnetworkinfo": "Returns an object containing various state info regarding P2P networking.",
  "getnodeaddresses": "Return known addresses which can potentially be used to find new nodes in the network",
  "getpeerinfo": "Returns data about each connected network node as a json array of objects.",
  "listbanned": "List all manually banned IPs/Subnets.",
  "ping": "Requests that a ping be sent to all other nodes, to measure ping time.",
  "setban": "Attempts to add or remove an IP/Subnet from the banned list.",
  "setnetworkactive": "Disable/enable all p2p network activity.",
  "analyzepsbt": "Analyzes and provides information about the current status of a PSBT and its inputs",
  "combinepsbt": "Combine multiple partially signed Bitcoin transactions into one transaction.",
  "combinerawtransaction": "Combine multiple partially signed transactions into one transaction.",
  "converttopsbt": "Converts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\ncreatepsbt and walletcreatefundedpsbt should be used for new applications.",
  "createpsbt": "Creates a transaction in the Partially Signed Transaction format.",
  "createrawtransaction": "Create a transaction spending the given inputs and creating new outputs.",
  "decodepsbt": "Return a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.",
  "decoderawtransaction": "Return a JSON object representing the serialized, hex-encoded transaction.",
  "decodescript": "Decode a hex-encoded script.",
  "finalizepsbt": "Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\nnetwork serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be\ncreated which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.",
  "fundrawtransaction": "If the transaction has no inputs, they will be automatically selected to meet its out value.",
  "getrawtransaction": "Return the raw transaction data.",
  "joinpsbts": "Joins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\nNo input in any of the PSBTs can be in more than one of the PSBTs.",
  "sendrawtransaction": "Submit a raw transaction (serialized, hex-encoded) to local node and network.",
  "signrawtransactionwithkey": "Sign inputs for raw transaction (serialized, hex-encoded).",
  "testmempoolaccept": "Returns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.",
  "utxoupdatepsbt": "Updates all segwit inputs and outputs in a PSBT with data from output descriptors, the UTXO set or the mempool.",
  "createmultisig": "Creates a multi-signature address with n signature of m keys required.",
  "deriveaddresses": "Derives one or more addresses corresponding to an output descriptor.",
  "estimatesmartfee": "Estimates the approximate fee per kilobyte needed for a transaction to begin\nconfirmation within conf_target blocks if possible and return the number of blocks\nfor which the estimate is valid. Uses virtual transaction size as defined\nin BIP 141 (witness data is discounted).",
  "getdescriptorinfo": "Analyses a descriptor.",
  "getindexinfo": "Returns the status of one or all available indices currently running in the node.",
  "signmessagewithprivkey": "Sign a message with the private key of an address",
  "validateaddress": "Return information about the given bitcoin address.",
  "verifymessage": "Verify a signed message",
  "abandontransaction": "Mark in-wallet transaction <txid> as abandoned\nThis will mark this transaction and all its in-wallet descendants as abandoned which will allow\nfor their inputs to be respent.  It can be used to replace “stuck” or evicted transactions.",
  "abortrescan": "Stops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.",
  "addmultisigaddress": "Add an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.",
  "backupwallet": "Safely copies current wallet file to destination, which can be a directory or a path with filename.",
  "bumpfee": "Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.",
  "createwallet": "Creates and loads a new wallet.",
  "dumpprivkey": "Reveals the private key corresponding to ‘address’.",
  "dumpwallet": "Dumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.",
  "encryptwallet": "Encrypts the wallet with ‘passphrase’. This is for first time encryption.",
  "getaddressbylabel": "",
  "getaddressinfo": "Return information about the given bitcoin address.",
  "getbalance": "Returns the total available balance.",
  "getbalances": "Returns an object with all balances in BTC.",
  "getnewaddress": "Returns a new Bitcoin address for receiving payments.",
  "getrawchangeaddress": "Returns a new Bitcoin address, for receiving change.",
  "getreceivedbyaddress": "Returns the total amount received by the given address in transactions with at least minconf confirmations.",
  "getreceivedbylabel": "Returns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.",
  "gettransaction": "Get detailed information about in-wallet transaction <txid>",
  "getunconfirmedbalance": "DEPRECATED\nIdentical to getbalances().mine.untrusted_pending",
  "getwalletinfo": "Returns an object containing various wallet state info.",
  "importaddress": "Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.",
  "importdescriptors": "Import descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.",
  "importmulti": "Import addresses/scripts (with private or public keys, redeem script (P2SH)), optionally rescanning the blockchain from the earliest creation time of the imported scripts. Requires a new wallet backup.",
  "importprivkey": "Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.",
  "importprunedfunds": "Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.",
  "importpubkey": "Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.",
  "importwallet": "Imports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.",
  "keypoolrefill": "Fills the keypool.",
  "listaddressgroupings": "Lists groups of addresses which have had their common ownership\nmade public by common use as inputs or as the resulting change\nin past transactions",
  "listlabels": "Returns the list of all labels, or labels that are assigned to addresses with a specific purpose.",
  "listlockunspent": "Returns list of temporarily unspendable outputs.",
  "listreceivedbyaddress": "List balances by receiving address.",
  "listreceivedbylabel": "List received transactions by label.",
  "listsinceblock": "Get all transactions in blocks since block [blockhash], or all transactions if omitted.",
  "listtransactions": "If a label name is provided, this will return only incoming transactions paying to addresses with the specified label.",
  "listunspent": "Returns array of unspent transaction outputs\nwith between minconf and maxconf (inclusive) confirmations.",
  "listwalletdir": "Returns a list of wallets in the wallet directory.",
  "listwallets": "Returns a list of currently loaded wallets.",
  "loadwallet": "Loads a wallet from a wallet file or directory.",
  "lockunspent": "Updates list of temporarily unspendable outputs.",
  "psbtbumpfee": "Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.",
  "removeprunedfunds": "Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.",
  "rescanblockchain": "Rescan the local blockchain for wallet related transactions.",
  "send": "EXPERIMENTAL warning: this call may be changed in future releases.",
  "sendmany": "Send multiple times. Amounts are double-precision floating point numbers.",
  "sendtoaddress": "Send an amount to a given address.",
  "sethdseed": "Set or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\nHD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.",
  "setlabel": "Sets the label associated with the given address.",
  "settxfee": "Set the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.",
  "setwalletflag": "Change the state of the given wallet flag for a wallet.",
  "signmessage": "Sign a message with the private key of an address\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.",
  "signrawtransactionwithwallet": "Sign inputs for raw transaction (serialized, hex-encoded).",
  "unloadwallet": "Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.",
  "upgradewallet": "Upgrade the wallet. Upgrades to the latest version if no version number is specified.",
  "walletcreatefundedpsbt": "Creates and funds a transaction in the Partially Signed Transaction format.",
  "walletlock": "Removes the wallet encryption key from memory, locking the wallet.",
  "walletpassphrase": "Stores the wallet decryption key in memory for ‘timeout’ seconds.",
  "walletpassphrasechange": "Changes the wallet passphrase from ‘oldpassphrase’ to ‘newpassphrase’.",
  "walletprocesspsbt": "Update a PSBT with input information from our wallet and then sign inputs\nthat we can sign for."
}
